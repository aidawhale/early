openapi: 3.0.2
info:
  title: ''
  version: ''
paths:
      
  /api/profiles/:
    get:
      operationId: listProfiles
      description: Get all profiles, allowing filtering.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: validated_data__age
        required: false
        in: query
        description: The age groups of the profiles.
        schema:
          type: string
      - name: validated_data__gender
        required: false
        in: query
        description: The genders of the profiles.
        schema:
          type: string
      - name: validated_data__location
        required: false
        in: query
        description: The locations of the profiles.
        schema:
          type: string
      - name: validated_data__personality
        required: false
        in: query
        description: The personalities of the profiles.
        schema:
          type: string
      - name: validated_data__depressed
        required: false
        in: query
        description: The depression value of the profiles.
        schema:
          type: string
      - name: is_valid
        required: false
        in: query
        description: The validation status of the profiles. True, if the profile has been validated, false otherwise.
        schema:
          type: string
      - name: processed
        required: false
        in: query
        description: The process status of the profiles. True, if the profile has been processed, false otherwise.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - profile
    post:
      operationId: createProfile
      description: Add a new profile.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - profile
  /api/profiles/{id}/:
    get:
      operationId: retrieveProfile
      description: Get one profile.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - profile
    put:
      operationId: updateProfile
      description: Edit profile.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Profile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Profile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - profile
  /api/profiles/{id}/reasons/:
    get:
      operationId: reasonsProfile
      description: Returns a list of all the reasons that the given profile has.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this profile.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
      tags:
      - profile
      
  /api/globaldata/{id}/:
    get:
      operationId: retrieveGlobalData
      description: Get global data to know the state of the Reddit task "load Reddit data". The main global data has id 1.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this global data.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalData'
          description: ''
      tags:
      - reddit_task
    put:
      operationId: updateGlobalData
      description: Update global data to inform that the Reddit task has started or finished.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this global data.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlobalData'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/GlobalData'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GlobalData'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalData'
          description: ''
      tags:
      - reddit_task
  
  /api/corpus/:
    get:
      operationId: listCorpus
      description: Get all corpus. A corpus is a "category" that a profile belong to.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Corpus'
          description: ''
      tags:
      - corpus
    post:
      operationId: createCorpus
      description: Add a corpus.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Corpus'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Corpus'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Corpus'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Corpus'
          description: ''
      tags:
      - corpus
      
  /api/export/:
    get:
      operationId: export
      description: Get validated demographic data and profiles.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Export'
          description: ''
      tags:
      - export
  /api/comments/:
    get:
      operationId: listProfileComments
      description: Get profiles with its comments.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentsCorpus'
          description: ''
      tags:
      - export
  /api/labeleddata/:
    get:
      operationId: exportLabeledData
      description: Get profiles, its comments and its demographic data.
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LabeledData'
          description: ''
      tags:
      - export
      
  /api/login:
    post:
      operationId: createlogin
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema: {}
          application/x-www-form-urlencoded:
            schema: {}
          multipart/form-data:
            schema: {}
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
      tags:
      - login
      
  /api/users/:
    get:
      operationId: listUsers
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
          description: ''
      tags:
      - user
    post:
      operationId: createUser
      description: API endpoint that allows users to be viewed or edited.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - user
  /api/users/{id}/:
    get:
      operationId: retrieveUser
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - user
    put:
      operationId: updateUser
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - user
    patch:
      operationId: partialUpdateUser
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
      tags:
      - user
    delete:
      operationId: destroyUser
      description: API endpoint that allows users to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this user.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - user
  /api/groups/:
    get:
      operationId: listGroups
      description: API endpoint that allows groups to be viewed or edited.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 123
                  next:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=4
                  previous:
                    type: string
                    nullable: true
                    format: uri
                    example: http://api.example.org/accounts/?page=2
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Group'
          description: ''
      tags:
      - groups
    post:
      operationId: createGroup
      description: API endpoint that allows groups to be viewed or edited.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
      tags:
      - groups
  /api/groups/{id}/:
    get:
      operationId: retrieveGroup
      description: API endpoint that allows groups to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this group.
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
      tags:
      - groups
    put:
      operationId: updateGroup
      description: API endpoint that allows groups to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this group.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
      tags:
      - groups
    patch:
      operationId: partialUpdateGroup
      description: API endpoint that allows groups to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this group.
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Group'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
          description: ''
      tags:
      - groups
    delete:
      operationId: destroyGroup
      description: API endpoint that allows groups to be viewed or edited.
      parameters:
      - name: id
        in: path
        required: true
        description: A unique integer value identifying this group.
        schema:
          type: string
      responses:
        '204':
          description: ''
      tags:
      - groups
components:
  schemas:
    User:
      type: object
      properties:
        url:
          type: string
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
      required:
      - username
    Group:
      type: object
      properties:
        url:
          type: string
          readOnly: true
        name:
          type: string
          maxLength: 150
      required:
      - name
    Profile:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        experiment_id:
          type: string
          readOnly: true
        reddit_username:
          type: string
          readOnly: true
        corpus:
          type: integer
          nullable: true
        is_valid:
          type: boolean
          readOnly: true
        validated_by:
          type: object
          properties:
            username:
              type: string
              description: Required. 150 characters or fewer. Letters, digits and
                @/./+/-/_ only.
              pattern: ^[\w.@+-]+\z
              maxLength: 150
          required:
          - username
          nullable: true
        system_data:
          allOf:
            - $ref: '#/components/schemas/ProfileData'
            - nullable: true
        validated_data:
          allOf:
            - $ref: '#/components/schemas/ProfileData'
            - nullable: true
        data:
          type: string
          readOnly: true
        reasons:
          type: array
          items:
            type: object
            properties:
              reason:
                type: string
                nullable: true
                maxLength: 1000
              profile_data_type:
                enum:
                - Age
                - Gender
                - Location
                - Personality
                - Depression
                type: string
            required:
            - profile_data_type
          nullable: true
        processed:
          type: boolean
    Export:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        experiment_id:
          type: string
          maxLength: 50
        validated_data:
          $ref: '#/components/schemas/ProfileData'
      required:
      - experiment_id
      - validated_data
    GlobalData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        load_in_progress:
          type: boolean
        task_id:
          type: string
          nullable: true
          maxLength: 100
    Corpus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        corpus_name:
          type: string
          maxLength: 1000
      required:
      - corpus_name
    CommentsCorpus:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        corpus:
          type: integer
          nullable: true
        comments:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              text:
                type: string
            required:
            - date
            - text
    LabeledData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        experiment_id:
          type: string
          maxLength: 50
        corpus:
          type: integer
          nullable: true
        validated_data:
          $ref: '#/components/schemas/ProfileData'
        comments:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date-time
              text:
                type: string
            required:
            - date
            - text
      required:
      - experiment_id
      - validated_data
    LocationEnum:
      type: string
      nullable: true
      enum:
        - AF
        - AX
        - AL
        - DZ
        - AS
        - AD
        - AO
        - AI
        - AQ
        - AG
        - AR
        - AM
        - AW
        - AU
        - AT
        - AZ
        - BS
        - BH
        - BD
        - BB
        - BY
        - BE
        - BZ
        - BJ
        - BM
        - BT
        - BO
        - BQ
        - BA
        - BW
        - BV
        - BR
        - IO
        - BN
        - BG
        - BF
        - BI
        - CV
        - KH
        - CM
        - CA
        - KY
        - CF
        - TD
        - CL
        - CN
        - CX
        - CC
        - CO
        - KM
        - CG
        - CD
        - CK
        - CR
        - CI
        - HR
        - CU
        - CW
        - CY
        - CZ
        - DK
        - DJ
        - DM
        - DO
        - EC
        - EG
        - SV
        - GQ
        - ER
        - EE
        - SZ
        - ET
        - FK
        - FO
        - FJ
        - FI
        - FR
        - GF
        - PF
        - TF
        - GA
        - GM
        - GE
        - DE
        - GH
        - GI
        - GR
        - GL
        - GD
        - GP
        - GU
        - GT
        - GG
        - GN
        - GW
        - GY
        - HT
        - HM
        - VA
        - HN
        - HK
        - HU
        - IS
        - IN
        - ID
        - IR
        - IQ
        - IE
        - IM
        - IL
        - IT
        - JM
        - JP
        - JE
        - JO
        - KZ
        - KE
        - KI
        - KW
        - KG
        - LA
        - LV
        - LB
        - LS
        - LR
        - LY
        - LI
        - LT
        - LU
        - MO
        - MG
        - MW
        - MY
        - MV
        - ML
        - MT
        - MH
        - MQ
        - MR
        - MU
        - YT
        - MX
        - FM
        - MD
        - MC
        - MN
        - ME
        - MS
        - MA
        - MZ
        - MM
        - NA
        - NR
        - NP
        - NL
        - NC
        - NZ
        - NI
        - NE
        - NG
        - NU
        - NF
        - KP
        - MK
        - MP
        - 'NO'
        - OM
        - PK
        - PW
        - PS
        - PA
        - PG
        - PY
        - PE
        - PH
        - PN
        - PL
        - PT
        - PR
        - QA
        - RE
        - RO
        - RU
        - RW
        - BL
        - SH
        - KN
        - LC
        - MF
        - PM
        - VC
        - WS
        - SM
        - ST
        - SA
        - SN
        - RS
        - SC
        - SL
        - SG
        - SX
        - SK
        - SI
        - SB
        - SO
        - ZA
        - GS
        - KR
        - SS
        - ES
        - LK
        - SD
        - SR
        - SJ
        - SE
        - CH
        - SY
        - TW
        - TJ
        - TZ
        - TH
        - TL
        - TG
        - TK
        - TO
        - TT
        - TN
        - TR
        - TM
        - TC
        - TV
        - UG
        - UA
        - AE
        - GB
        - UM
        - US
        - UY
        - UZ
        - VU
        - VE
        - VN
        - VG
        - VI
        - WF
        - EH
        - YE
        - ZM
        - ZW
    ProfileData:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        age:
          enum:
          - 12-20
          - 20-30
          - 30-65
          - Over65
          - Unknown
          type: string
        gender:
          enum:
          - Male
          - Female
          - Unknown
          type: string
        location:
          $ref: '#/components/schemas/LocationEnum'
        personality:
          enum:
          - Extraversion
          - Agreeableness
          - Conscientiousness
          - Neuroticism
          - Openness
          - Unknown
          type: string
        depressed:
          type: boolean
          nullable: true
